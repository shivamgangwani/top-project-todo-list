(()=>{"use strict";class t{constructor(t,o){this.title=t,this.description=o}setTitle(t){this.title=t}setDescription(t){this.description=t}}class o extends t{constructor(t,o){super(t,o),this.due_at="today",this.priority="Low",this.done=!1}setDueAt(t){this.due_at=t}setPriority(t){this.priority=t}setDoneState(t){this.done=t}toggleDoneState(){this.setDoneState(!this.done)}}let e=new class extends t{constructor(t,o){super(t,o),this.todos=[]}createToDo(t,e){this.todos.push(new o(t,e))}deleteToDo(t){this.todos.splice(this.todos.indexOf(t),1)}viewToDos(){for(const[t,o]of Object.entries(this.todos))console.log(`${t} - ${o.title} - ${o.description} - DONE: ${o.done} - DUE AT: ${o.due_at} - PRIORITY : ${o.priority}`)}getPendingToDos(){return this.todos.filter((t=>!t.done))}getPendingToDosCount(){return this.getPendingToDos().length}}("Test","ABCD");e.createToDo("Todo1","Just testing"),e.createToDo("Todo2","Just testing"),e.createToDo("Todo3","Just testing"),console.log(e.getPendingToDos()),console.log(e.getPendingToDosCount()),e.todos[0].setDoneState(!0),e.todos[1].setPriority("High"),e.todos[2].setDueAt("16-Sep-2023 21:00:00"),console.log(e.viewToDos())})();